basePath: /
definitions:
  dto.TCreateUserDetailRequest:
    properties:
      address:
        description: |-
          Address of the user (optional)
          Example: 123 Main Street
        type: string
      job:
        description: |-
          Job of the user (optional)
          Example: Software Engineer
        type: string
      phone:
        description: |-
          Phone number of the user (optional)
          Example: +1234567890
        type: string
    type: object
  dto.TGetUserResponse:
    properties:
      avatar:
        type: string
      email:
        type: string
      is_verified:
        type: boolean
      role:
        type: string
      username:
        type: string
    type: object
  dto.TLoginRequest:
    properties:
      email:
        description: |-
          Email of the user (required, should be a valid email address)
          Example: john.doe@example.com
          Required: true
          Format: email
        type: string
      password:
        description: |-
          Password of the user (required, minimum length 8)
          Example: mySecurePassword
          Required: true
          MinLength: 8
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.TLoginResponse:
    properties:
      access_token:
        type: string
      email:
        type: string
      role:
        type: string
    type: object
  dto.TRegisterRequest:
    properties:
      email:
        description: |-
          Email of the user (required, should be a valid email address)
          Example: john.doe@example.com
          Required: true
          Format: email
        type: string
      name:
        description: |-
          Name of the user (required)
          Example: John Doe
          Required: true
        type: string
      password:
        description: |-
          Password of the user (required, minimum length 8)
          Example: mySecurePassword
          Required: true
          MinLength: 8
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.TVerificationRequest:
    properties:
      email:
        description: |-
          Email of the user (required, should be a valid email address)
          Example: john.doe@example.com
          Required: true
          Format: email
        type: string
      token:
        description: |-
          Token for the user (required)
          Example: 1HV3O4
          Required: true
          MinLength: 6
        minLength: 6
        type: string
    required:
    - email
    - token
    type: object
host: localhost:3000
info:
  contact: {}
  description: Happy integration
  title: CodeNexus API
  version: "1.0"
paths:
  /api/v1/auth/signin:
    post:
      consumes:
      - application/json
      description: Sign in a user with the provided credentials
      parameters:
      - description: User login details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Signin successfully
          schema:
            $ref: '#/definitions/dto.TLoginResponse'
        "400":
          description: invalid payload" or "error validating payload
          schema:
            type: string
        "401":
          description: user not found" or "your account has not been verified" or
            "incorrect password
          schema:
            type: string
      summary: Sign in a user
      tags:
      - Auth
  /api/v1/auth/signup:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided details
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: registration is successful, please check your email for email
            verification
          schema:
            type: string
        "400":
          description: invalid payload" or "error validating payload" or "registration
            failed
          schema:
            type: string
      summary: Register a new user
      tags:
      - Auth
  /api/v1/auth/verify:
    post:
      consumes:
      - application/json
      description: Verify user email with the provided token
      parameters:
      - description: Email verification details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TVerificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Your email has been successfully verified
          schema:
            type: string
        "400":
          description: invalid payload" or "error validating payload" or "email verification
            failed
          schema:
            type: string
      summary: Verify user email
      tags:
      - Auth
  /api/v1/user/me:
    get:
      consumes:
      - application/json
      description: Get information about the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            $ref: '#/definitions/dto.TGetUserResponse'
        "401":
          description: user not found" or "Access denied
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get current user
      tags:
      - User
  /api/v1/user/me/avatar:
    patch:
      consumes:
      - multipart/form-data
      description: Update the avatar of the currently authenticated user
      parameters:
      - description: Image file to upload
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Avatar update success
          schema:
            type: string
        "400":
          description: Invalid request or error uploading image
          schema:
            type: string
        "401":
          description: User not found or unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update user avatar
      tags:
      - User
  /api/v1/user/me/detail:
    post:
      consumes:
      - application/json
      description: Create user detail for the currently authenticated user
      parameters:
      - description: User detail information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TCreateUserDetailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User detail created successfully
          schema:
            type: string
        "400":
          description: Invalid input format
          schema:
            type: string
        "401":
          description: User not found" or "Access denied
          schema:
            type: string
      security:
      - Bearer: []
      summary: Create user detail
      tags:
      - User
schemes:
- http
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
